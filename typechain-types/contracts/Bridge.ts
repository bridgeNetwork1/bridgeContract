/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface BridgeInterface extends utils.Interface {
  functions: {
    "activeNativeAsset(address,bool)": FunctionFragment;
    "addForiegnAsset(address,uint256,uint256[],string[],bool,address,address,uint256,bool,address)": FunctionFragment;
    "assetLimits(address,bool)": FunctionFragment;
    "bridgeData()": FunctionFragment;
    "bridgePool()": FunctionFragment;
    "burn(address,uint256,address)": FunctionFragment;
    "chainId()": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "completeMigration()": FunctionFragment;
    "controller()": FunctionFragment;
    "deployer()": FunctionFragment;
    "directForiegnAssets(uint256)": FunctionFragment;
    "feeController()": FunctionFragment;
    "foriegnAssetChainID(address)": FunctionFragment;
    "foriegnAssets(address)": FunctionFragment;
    "foriegnAssetsList(uint256)": FunctionFragment;
    "getAssetCount()": FunctionFragment;
    "getAssetSupportedChainIds(address)": FunctionFragment;
    "initiateMigration(address)": FunctionFragment;
    "isActiveNativeAsset(address)": FunctionFragment;
    "isAssetSupportedChain(address,uint256)": FunctionFragment;
    "isDirectSwap(address,uint256)": FunctionFragment;
    "migrateForiegn(uint256,bool)": FunctionFragment;
    "migrateNative(uint256)": FunctionFragment;
    "mint(bytes32)": FunctionFragment;
    "nativeAssets(address)": FunctionFragment;
    "nativeAssetsList(uint256)": FunctionFragment;
    "pauseBrigde()": FunctionFragment;
    "paused()": FunctionFragment;
    "registerForiegnMigration(address,uint256,uint256,uint256,bool,address,address,uint256,bool,address)": FunctionFragment;
    "registerNativeMigration(address,uint256[2],uint256,bool,address,address,uint256[3],bool,uint256[])": FunctionFragment;
    "registerRail(address,uint256,uint256,uint256[],address[],bool,address,address,uint256)": FunctionFragment;
    "registry()": FunctionFragment;
    "remitFees(address,bool)": FunctionFragment;
    "send(uint256,address,uint256,address)": FunctionFragment;
    "settings()": FunctionFragment;
    "standardDecimals()": FunctionFragment;
    "updateAddresses(address,address,address)": FunctionFragment;
    "updateAsset(address,address,address,uint256,uint256)": FunctionFragment;
    "wrappedForiegnPair(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeNativeAsset"
      | "addForiegnAsset"
      | "assetLimits"
      | "bridgeData"
      | "bridgePool"
      | "burn"
      | "chainId"
      | "claim"
      | "completeMigration"
      | "controller"
      | "deployer"
      | "directForiegnAssets"
      | "feeController"
      | "foriegnAssetChainID"
      | "foriegnAssets"
      | "foriegnAssetsList"
      | "getAssetCount"
      | "getAssetSupportedChainIds"
      | "initiateMigration"
      | "isActiveNativeAsset"
      | "isAssetSupportedChain"
      | "isDirectSwap"
      | "migrateForiegn"
      | "migrateNative"
      | "mint"
      | "nativeAssets"
      | "nativeAssetsList"
      | "pauseBrigde"
      | "paused"
      | "registerForiegnMigration"
      | "registerNativeMigration"
      | "registerRail"
      | "registry"
      | "remitFees"
      | "send"
      | "settings"
      | "standardDecimals"
      | "updateAddresses"
      | "updateAsset"
      | "wrappedForiegnPair"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeNativeAsset",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "addForiegnAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetLimits",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "directForiegnAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foriegnAssetChainID",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "foriegnAssets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "foriegnAssetsList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetSupportedChainIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateMigration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveNativeAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetSupportedChain",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDirectSwap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateForiegn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateNative",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeAssets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeAssetsList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseBrigde",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerForiegnMigration",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNativeMigration",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRail",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remitFees",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "standardDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedForiegnPair",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeNativeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addForiegnAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgeData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "directForiegnAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foriegnAssetChainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foriegnAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foriegnAssetsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetSupportedChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveNativeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAssetSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDirectSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateForiegn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeAssetsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseBrigde",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerForiegnMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNativeMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remitFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "standardDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedForiegnPair",
    data: BytesLike
  ): Result;

  events: {
    "AssetUpdated(address,address,address,uint256,uint256,bool)": EventFragment;
    "BridgePauseStatusChanged(bool)": EventFragment;
    "BurnTransaction(bytes32,uint256,address,uint256,address,uint256,address)": EventFragment;
    "ForiegnAssetAdded(address,uint256,address)": EventFragment;
    "MigratedAsset(address,bool)": EventFragment;
    "MigrationCompleted(address)": EventFragment;
    "MigrationInitiated(address)": EventFragment;
    "RailAdded(address,uint256,uint256,uint256[],address[],bool,address,bool,address,address,uint256)": EventFragment;
    "RegisteredForiegnMigration(address,uint256,address)": EventFragment;
    "RegisterredNativeMigration(address)": EventFragment;
    "SendTransaction(bytes32,uint256,address,uint256,address,uint256,address)": EventFragment;
    "UpdatedAddresses(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgePauseStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForiegnAssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigratedAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RailAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredForiegnMigration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterredNativeMigration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedAddresses"): EventFragment;
}

export interface AssetUpdatedEventObject {
  assetAddress: string;
  manager: string;
  feeRemitance: string;
  min: BigNumber;
  max: BigNumber;
  native: boolean;
}
export type AssetUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, boolean],
  AssetUpdatedEventObject
>;

export type AssetUpdatedEventFilter = TypedEventFilter<AssetUpdatedEvent>;

export interface BridgePauseStatusChangedEventObject {
  status: boolean;
}
export type BridgePauseStatusChangedEvent = TypedEvent<
  [boolean],
  BridgePauseStatusChangedEventObject
>;

export type BridgePauseStatusChangedEventFilter =
  TypedEventFilter<BridgePauseStatusChangedEvent>;

export interface BurnTransactionEventObject {
  transactionID: string;
  chainID: BigNumber;
  assetAddress: string;
  sendAmount: BigNumber;
  receiver: string;
  nounce: BigNumber;
  sender: string;
}
export type BurnTransactionEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, BigNumber, string],
  BurnTransactionEventObject
>;

export type BurnTransactionEventFilter = TypedEventFilter<BurnTransactionEvent>;

export interface ForiegnAssetAddedEventObject {
  foriegnAddress: string;
  chainID: BigNumber;
  wrappedAddress: string;
}
export type ForiegnAssetAddedEvent = TypedEvent<
  [string, BigNumber, string],
  ForiegnAssetAddedEventObject
>;

export type ForiegnAssetAddedEventFilter =
  TypedEventFilter<ForiegnAssetAddedEvent>;

export interface MigratedAssetEventObject {
  assetAddress: string;
  isNativeAsset: boolean;
}
export type MigratedAssetEvent = TypedEvent<
  [string, boolean],
  MigratedAssetEventObject
>;

export type MigratedAssetEventFilter = TypedEventFilter<MigratedAssetEvent>;

export interface MigrationCompletedEventObject {
  newBridge: string;
}
export type MigrationCompletedEvent = TypedEvent<
  [string],
  MigrationCompletedEventObject
>;

export type MigrationCompletedEventFilter =
  TypedEventFilter<MigrationCompletedEvent>;

export interface MigrationInitiatedEventObject {
  newBridge: string;
}
export type MigrationInitiatedEvent = TypedEvent<
  [string],
  MigrationInitiatedEventObject
>;

export type MigrationInitiatedEventFilter =
  TypedEventFilter<MigrationInitiatedEvent>;

export interface RailAddedEventObject {
  assetAddress: string;
  minAmount: BigNumber;
  maxAmount: BigNumber;
  supportedChains: BigNumber[];
  foriegnAddresses: string[];
  directSwap: boolean;
  registrar: string;
  ownedRail: boolean;
  manager: string;
  feeRemitance: string;
  deployWith: BigNumber;
}
export type RailAddedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber[],
    string[],
    boolean,
    string,
    boolean,
    string,
    string,
    BigNumber
  ],
  RailAddedEventObject
>;

export type RailAddedEventFilter = TypedEventFilter<RailAddedEvent>;

export interface RegisteredForiegnMigrationEventObject {
  foriegnAddress: string;
  chainID: BigNumber;
  wrappedAddress: string;
}
export type RegisteredForiegnMigrationEvent = TypedEvent<
  [string, BigNumber, string],
  RegisteredForiegnMigrationEventObject
>;

export type RegisteredForiegnMigrationEventFilter =
  TypedEventFilter<RegisteredForiegnMigrationEvent>;

export interface RegisterredNativeMigrationEventObject {
  assetAddress: string;
}
export type RegisterredNativeMigrationEvent = TypedEvent<
  [string],
  RegisterredNativeMigrationEventObject
>;

export type RegisterredNativeMigrationEventFilter =
  TypedEventFilter<RegisterredNativeMigrationEvent>;

export interface SendTransactionEventObject {
  transactionID: string;
  chainID: BigNumber;
  assetAddress: string;
  sendAmount: BigNumber;
  receiver: string;
  nounce: BigNumber;
  sender: string;
}
export type SendTransactionEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, BigNumber, string],
  SendTransactionEventObject
>;

export type SendTransactionEventFilter = TypedEventFilter<SendTransactionEvent>;

export interface UpdatedAddressesEventObject {
  settings: string;
  feeController: string;
  deployer: string;
}
export type UpdatedAddressesEvent = TypedEvent<
  [string, string, string],
  UpdatedAddressesEventObject
>;

export type UpdatedAddressesEventFilter =
  TypedEventFilter<UpdatedAddressesEvent>;

export interface Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeNativeAsset(
      assetAddress: PromiseOrValue<string>,
      activate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addForiegnAsset(
      foriegnAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      range: PromiseOrValue<BigNumberish>[],
      assetMeta: PromiseOrValue<string>[],
      OwnedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      deployWith: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      nativeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetLimits(
      assetAddress: PromiseOrValue<string>,
      native: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    bridgeData(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ]
    >;

    bridgePool(overrides?: CallOverrides): Promise<[string]>;

    burn(
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      claimID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    directForiegnAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        foriegnAddress: string;
        nativeAddress: string;
        chainID: BigNumber;
        isSet: boolean;
      }
    >;

    feeController(overrides?: CallOverrides): Promise<[string]>;

    foriegnAssetChainID(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    foriegnAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        boolean
      ] & {
        tokenAddress: string;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        ownerFeeBalance: BigNumber;
        networkFeeBalance: BigNumber;
        collectedFees: BigNumber;
        ownedRail: boolean;
        manager: string;
        feeRemitance: string;
        isSet: boolean;
      }
    >;

    foriegnAssetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAssetSupportedChainIds(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    initiateMigration(
      _newbridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isActiveNativeAsset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAssetSupportedChain(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDirectSwap(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migrateForiegn(
      limit: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrateNative(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      mintID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nativeAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        boolean
      ] & {
        tokenAddress: string;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        ownerFeeBalance: BigNumber;
        networkFeeBalance: BigNumber;
        collectedFees: BigNumber;
        ownedRail: boolean;
        manager: string;
        feeRemitance: string;
        isSet: boolean;
      }
    >;

    nativeAssetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pauseBrigde(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registerForiegnMigration(
      wrappedAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      _collectedFees: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      foriegnAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNativeMigration(
      assetAddress: PromiseOrValue<string>,
      limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      collectedFees: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeRemitance: PromiseOrValue<string>,
      balances: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      active: PromiseOrValue<boolean>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRail(
      assetAddress: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      foriegnAddresses: PromiseOrValue<string>[],
      directSwap: PromiseOrValue<boolean>,
      feeAccount: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      deployWith: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    remitFees(
      assetAddress: PromiseOrValue<string>,
      native: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settings(overrides?: CallOverrides): Promise<[string]>;

    standardDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAddresses(
      _settings: PromiseOrValue<string>,
      _feeController: PromiseOrValue<string>,
      _deployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAsset(
      assetAddress: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      _feeRemitance: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrappedForiegnPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  activeNativeAsset(
    assetAddress: PromiseOrValue<string>,
    activate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addForiegnAsset(
    foriegnAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    range: PromiseOrValue<BigNumberish>[],
    assetMeta: PromiseOrValue<string>[],
    OwnedRail: PromiseOrValue<boolean>,
    manager: PromiseOrValue<string>,
    feeAddress: PromiseOrValue<string>,
    deployWith: PromiseOrValue<BigNumberish>,
    directSwap: PromiseOrValue<boolean>,
    nativeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetLimits(
    assetAddress: PromiseOrValue<string>,
    native: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  bridgeData(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ]
  >;

  bridgePool(overrides?: CallOverrides): Promise<string>;

  burn(
    assetAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    claimID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeMigration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  deployer(overrides?: CallOverrides): Promise<string>;

  directForiegnAssets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean] & {
      foriegnAddress: string;
      nativeAddress: string;
      chainID: BigNumber;
      isSet: boolean;
    }
  >;

  feeController(overrides?: CallOverrides): Promise<string>;

  foriegnAssetChainID(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  foriegnAssets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      boolean
    ] & {
      tokenAddress: string;
      minAmount: BigNumber;
      maxAmount: BigNumber;
      ownerFeeBalance: BigNumber;
      networkFeeBalance: BigNumber;
      collectedFees: BigNumber;
      ownedRail: boolean;
      manager: string;
      feeRemitance: string;
      isSet: boolean;
    }
  >;

  foriegnAssetsList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetCount(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getAssetSupportedChainIds(
    assetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  initiateMigration(
    _newbridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isActiveNativeAsset(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAssetSupportedChain(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDirectSwap(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  migrateForiegn(
    limit: PromiseOrValue<BigNumberish>,
    directSwap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrateNative(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    mintID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nativeAssets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      boolean
    ] & {
      tokenAddress: string;
      minAmount: BigNumber;
      maxAmount: BigNumber;
      ownerFeeBalance: BigNumber;
      networkFeeBalance: BigNumber;
      collectedFees: BigNumber;
      ownedRail: boolean;
      manager: string;
      feeRemitance: string;
      isSet: boolean;
    }
  >;

  nativeAssetsList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pauseBrigde(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registerForiegnMigration(
    wrappedAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    maxAmount: PromiseOrValue<BigNumberish>,
    ownedRail: PromiseOrValue<boolean>,
    manager: PromiseOrValue<string>,
    feeAddress: PromiseOrValue<string>,
    _collectedFees: PromiseOrValue<BigNumberish>,
    directSwap: PromiseOrValue<boolean>,
    foriegnAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNativeMigration(
    assetAddress: PromiseOrValue<string>,
    limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    collectedFees: PromiseOrValue<BigNumberish>,
    ownedRail: PromiseOrValue<boolean>,
    manager: PromiseOrValue<string>,
    feeRemitance: PromiseOrValue<string>,
    balances: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    active: PromiseOrValue<boolean>,
    supportedChains: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRail(
    assetAddress: PromiseOrValue<string>,
    minAmount: PromiseOrValue<BigNumberish>,
    maxAmount: PromiseOrValue<BigNumberish>,
    supportedChains: PromiseOrValue<BigNumberish>[],
    foriegnAddresses: PromiseOrValue<string>[],
    directSwap: PromiseOrValue<boolean>,
    feeAccount: PromiseOrValue<string>,
    manager: PromiseOrValue<string>,
    deployWith: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  remitFees(
    assetAddress: PromiseOrValue<string>,
    native: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    chainTo: PromiseOrValue<BigNumberish>,
    assetAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settings(overrides?: CallOverrides): Promise<string>;

  standardDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  updateAddresses(
    _settings: PromiseOrValue<string>,
    _feeController: PromiseOrValue<string>,
    _deployer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAsset(
    assetAddress: PromiseOrValue<string>,
    manager: PromiseOrValue<string>,
    _feeRemitance: PromiseOrValue<string>,
    min: PromiseOrValue<BigNumberish>,
    max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrappedForiegnPair(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    activeNativeAsset(
      assetAddress: PromiseOrValue<string>,
      activate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    addForiegnAsset(
      foriegnAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      range: PromiseOrValue<BigNumberish>[],
      assetMeta: PromiseOrValue<string>[],
      OwnedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      deployWith: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      nativeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    assetLimits(
      assetAddress: PromiseOrValue<string>,
      native: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    bridgeData(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ]
    >;

    bridgePool(overrides?: CallOverrides): Promise<string>;

    burn(
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      claimID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeMigration(overrides?: CallOverrides): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    deployer(overrides?: CallOverrides): Promise<string>;

    directForiegnAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        foriegnAddress: string;
        nativeAddress: string;
        chainID: BigNumber;
        isSet: boolean;
      }
    >;

    feeController(overrides?: CallOverrides): Promise<string>;

    foriegnAssetChainID(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foriegnAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        boolean
      ] & {
        tokenAddress: string;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        ownerFeeBalance: BigNumber;
        networkFeeBalance: BigNumber;
        collectedFees: BigNumber;
        ownedRail: boolean;
        manager: string;
        feeRemitance: string;
        isSet: boolean;
      }
    >;

    foriegnAssetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAssetSupportedChainIds(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    initiateMigration(
      _newbridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isActiveNativeAsset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAssetSupportedChain(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDirectSwap(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migrateForiegn(
      limit: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateNative(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      mintID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    nativeAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        boolean
      ] & {
        tokenAddress: string;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        ownerFeeBalance: BigNumber;
        networkFeeBalance: BigNumber;
        collectedFees: BigNumber;
        ownedRail: boolean;
        manager: string;
        feeRemitance: string;
        isSet: boolean;
      }
    >;

    nativeAssetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseBrigde(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registerForiegnMigration(
      wrappedAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      _collectedFees: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      foriegnAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerNativeMigration(
      assetAddress: PromiseOrValue<string>,
      limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      collectedFees: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeRemitance: PromiseOrValue<string>,
      balances: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      active: PromiseOrValue<boolean>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerRail(
      assetAddress: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      foriegnAddresses: PromiseOrValue<string>[],
      directSwap: PromiseOrValue<boolean>,
      feeAccount: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      deployWith: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    remitFees(
      assetAddress: PromiseOrValue<string>,
      native: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    settings(overrides?: CallOverrides): Promise<string>;

    standardDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    updateAddresses(
      _settings: PromiseOrValue<string>,
      _feeController: PromiseOrValue<string>,
      _deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAsset(
      assetAddress: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      _feeRemitance: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wrappedForiegnPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AssetUpdated(address,address,address,uint256,uint256,bool)"(
      assetAddress?: PromiseOrValue<string> | null,
      manager?: PromiseOrValue<string> | null,
      feeRemitance?: PromiseOrValue<string> | null,
      min?: null,
      max?: null,
      native?: null
    ): AssetUpdatedEventFilter;
    AssetUpdated(
      assetAddress?: PromiseOrValue<string> | null,
      manager?: PromiseOrValue<string> | null,
      feeRemitance?: PromiseOrValue<string> | null,
      min?: null,
      max?: null,
      native?: null
    ): AssetUpdatedEventFilter;

    "BridgePauseStatusChanged(bool)"(
      status?: null
    ): BridgePauseStatusChangedEventFilter;
    BridgePauseStatusChanged(
      status?: null
    ): BridgePauseStatusChangedEventFilter;

    "BurnTransaction(bytes32,uint256,address,uint256,address,uint256,address)"(
      transactionID?: null,
      chainID?: null,
      assetAddress?: PromiseOrValue<string> | null,
      sendAmount?: null,
      receiver?: PromiseOrValue<string> | null,
      nounce?: null,
      sender?: PromiseOrValue<string> | null
    ): BurnTransactionEventFilter;
    BurnTransaction(
      transactionID?: null,
      chainID?: null,
      assetAddress?: PromiseOrValue<string> | null,
      sendAmount?: null,
      receiver?: PromiseOrValue<string> | null,
      nounce?: null,
      sender?: PromiseOrValue<string> | null
    ): BurnTransactionEventFilter;

    "ForiegnAssetAdded(address,uint256,address)"(
      foriegnAddress?: PromiseOrValue<string> | null,
      chainID?: PromiseOrValue<BigNumberish> | null,
      wrappedAddress?: PromiseOrValue<string> | null
    ): ForiegnAssetAddedEventFilter;
    ForiegnAssetAdded(
      foriegnAddress?: PromiseOrValue<string> | null,
      chainID?: PromiseOrValue<BigNumberish> | null,
      wrappedAddress?: PromiseOrValue<string> | null
    ): ForiegnAssetAddedEventFilter;

    "MigratedAsset(address,bool)"(
      assetAddress?: PromiseOrValue<string> | null,
      isNativeAsset?: null
    ): MigratedAssetEventFilter;
    MigratedAsset(
      assetAddress?: PromiseOrValue<string> | null,
      isNativeAsset?: null
    ): MigratedAssetEventFilter;

    "MigrationCompleted(address)"(
      newBridge?: PromiseOrValue<string> | null
    ): MigrationCompletedEventFilter;
    MigrationCompleted(
      newBridge?: PromiseOrValue<string> | null
    ): MigrationCompletedEventFilter;

    "MigrationInitiated(address)"(
      newBridge?: PromiseOrValue<string> | null
    ): MigrationInitiatedEventFilter;
    MigrationInitiated(
      newBridge?: PromiseOrValue<string> | null
    ): MigrationInitiatedEventFilter;

    "RailAdded(address,uint256,uint256,uint256[],address[],bool,address,bool,address,address,uint256)"(
      assetAddress?: PromiseOrValue<string> | null,
      minAmount?: null,
      maxAmount?: null,
      supportedChains?: null,
      foriegnAddresses?: null,
      directSwap?: null,
      registrar?: null,
      ownedRail?: null,
      manager?: PromiseOrValue<string> | null,
      feeRemitance?: null,
      deployWith?: null
    ): RailAddedEventFilter;
    RailAdded(
      assetAddress?: PromiseOrValue<string> | null,
      minAmount?: null,
      maxAmount?: null,
      supportedChains?: null,
      foriegnAddresses?: null,
      directSwap?: null,
      registrar?: null,
      ownedRail?: null,
      manager?: PromiseOrValue<string> | null,
      feeRemitance?: null,
      deployWith?: null
    ): RailAddedEventFilter;

    "RegisteredForiegnMigration(address,uint256,address)"(
      foriegnAddress?: PromiseOrValue<string> | null,
      chainID?: PromiseOrValue<BigNumberish> | null,
      wrappedAddress?: PromiseOrValue<string> | null
    ): RegisteredForiegnMigrationEventFilter;
    RegisteredForiegnMigration(
      foriegnAddress?: PromiseOrValue<string> | null,
      chainID?: PromiseOrValue<BigNumberish> | null,
      wrappedAddress?: PromiseOrValue<string> | null
    ): RegisteredForiegnMigrationEventFilter;

    "RegisterredNativeMigration(address)"(
      assetAddress?: PromiseOrValue<string> | null
    ): RegisterredNativeMigrationEventFilter;
    RegisterredNativeMigration(
      assetAddress?: PromiseOrValue<string> | null
    ): RegisterredNativeMigrationEventFilter;

    "SendTransaction(bytes32,uint256,address,uint256,address,uint256,address)"(
      transactionID?: null,
      chainID?: null,
      assetAddress?: PromiseOrValue<string> | null,
      sendAmount?: null,
      receiver?: PromiseOrValue<string> | null,
      nounce?: null,
      sender?: PromiseOrValue<string> | null
    ): SendTransactionEventFilter;
    SendTransaction(
      transactionID?: null,
      chainID?: null,
      assetAddress?: PromiseOrValue<string> | null,
      sendAmount?: null,
      receiver?: PromiseOrValue<string> | null,
      nounce?: null,
      sender?: PromiseOrValue<string> | null
    ): SendTransactionEventFilter;

    "UpdatedAddresses(address,address,address)"(
      settings?: PromiseOrValue<string> | null,
      feeController?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null
    ): UpdatedAddressesEventFilter;
    UpdatedAddresses(
      settings?: PromiseOrValue<string> | null,
      feeController?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null
    ): UpdatedAddressesEventFilter;
  };

  estimateGas: {
    activeNativeAsset(
      assetAddress: PromiseOrValue<string>,
      activate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addForiegnAsset(
      foriegnAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      range: PromiseOrValue<BigNumberish>[],
      assetMeta: PromiseOrValue<string>[],
      OwnedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      deployWith: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      nativeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetLimits(
      assetAddress: PromiseOrValue<string>,
      native: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridgeData(overrides?: CallOverrides): Promise<BigNumber>;

    bridgePool(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      claimID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    directForiegnAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeController(overrides?: CallOverrides): Promise<BigNumber>;

    foriegnAssetChainID(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foriegnAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foriegnAssetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetSupportedChainIds(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateMigration(
      _newbridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isActiveNativeAsset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAssetSupportedChain(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDirectSwap(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateForiegn(
      limit: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrateNative(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      mintID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nativeAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeAssetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseBrigde(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registerForiegnMigration(
      wrappedAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      _collectedFees: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      foriegnAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNativeMigration(
      assetAddress: PromiseOrValue<string>,
      limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      collectedFees: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeRemitance: PromiseOrValue<string>,
      balances: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      active: PromiseOrValue<boolean>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRail(
      assetAddress: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      foriegnAddresses: PromiseOrValue<string>[],
      directSwap: PromiseOrValue<boolean>,
      feeAccount: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      deployWith: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    remitFees(
      assetAddress: PromiseOrValue<string>,
      native: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    standardDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    updateAddresses(
      _settings: PromiseOrValue<string>,
      _feeController: PromiseOrValue<string>,
      _deployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAsset(
      assetAddress: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      _feeRemitance: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrappedForiegnPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeNativeAsset(
      assetAddress: PromiseOrValue<string>,
      activate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addForiegnAsset(
      foriegnAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      range: PromiseOrValue<BigNumberish>[],
      assetMeta: PromiseOrValue<string>[],
      OwnedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      deployWith: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      nativeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetLimits(
      assetAddress: PromiseOrValue<string>,
      native: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      claimID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    directForiegnAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foriegnAssetChainID(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    foriegnAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    foriegnAssetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetSupportedChainIds(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateMigration(
      _newbridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isActiveNativeAsset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAssetSupportedChain(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDirectSwap(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateForiegn(
      limit: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrateNative(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      mintID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nativeAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeAssetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseBrigde(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerForiegnMigration(
      wrappedAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      _collectedFees: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      foriegnAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNativeMigration(
      assetAddress: PromiseOrValue<string>,
      limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      collectedFees: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeRemitance: PromiseOrValue<string>,
      balances: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      active: PromiseOrValue<boolean>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRail(
      assetAddress: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      foriegnAddresses: PromiseOrValue<string>[],
      directSwap: PromiseOrValue<boolean>,
      feeAccount: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      deployWith: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remitFees(
      assetAddress: PromiseOrValue<string>,
      native: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    standardDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAddresses(
      _settings: PromiseOrValue<string>,
      _feeController: PromiseOrValue<string>,
      _deployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAsset(
      assetAddress: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      _feeRemitance: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrappedForiegnPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
